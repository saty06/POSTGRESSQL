SELECT * FROM STUDENT.DEMO
 CREATE  FUNCTION STUDENT.SUM_DATA(A INT , B INT)
RETURNS INT AS $$
BEGIN 
RETURN A+B;
END;
$$ LANGUAGE PLPGSQL;

SELECT SUM_DATA(2,4) AS RESULT 

CREATE OR REPLACE FUNCTION STUDENT.SUB_DATA(A INT, B INT)
RETURNS  INT AS $$
BEGIN 
RETURN A-B;
END;
$$ LANGUAGE PLPGSQL
SELECT  STUDENT.SUB_DATA(29,10) AS RESULT 

CREATE OR REPLACE FUNCTION  STUDENT.MULTI_DATA(A INT, B INT)
RETURNS INT AS $$
BEGIN
RETURN A*B;
END;
$$ LANGUAGE PLPGSQL;
 SELECT  STUDENT.MULTI_DATA(12,23) AS RESULT 


CREATE OR REPLACE FUNCTION STUDENT.DIV_DATA(A INT, B INT)
RETURNS INT AS $$
BEGIN 
RETURN A/B ;
END;
$$ LANGUAGE PLPGSQL;

SELECT STUDENT.DIV_DATA(12,3) AS RESULT 

CREATE OR REPLACE FUNCTION STUDENT.PRINT_DATA()
RETURNS TEXT AS $$
DECLARE
    first_name TEXT;
BEGIN
    SELECT FIRST_NAME INTO first_name FROM STUDENT.DEMO WHERE ID = 3;
    RETURN first_name;
END;
$$ LANGUAGE PLPGSQL;
SELECT STUDENT.PRINT_DATA() AS RESULT 
	
CREATE OR REPLACE FUNCTION STUDENT.PRINT_INFO()
RETURNS TEXT AS $$
	DECLARE DATA_INFO TEXT;
BEGIN
 SELECT FIRST_NAME INTO DATA_INFO FROM STUDEN.DEMO  WHERE ID = 2;
	RETURN DATA_INFO;
END;
$$ LANGUAGE PLPGSQL;
SELECT STUDENT.PRINT_INFO()
-- DROP THE FUNCTION
DROP FUNCTION STUDENT.PRINT_INFO()
DROP FUNCTION STUDENT.PRINT_DATA()
--- FUNCTION 
CREATE OR REPLACE FUNCTION STUDENT.PRINT_DATA()
RETURNS TEXT AS $$
DECLARE 
MY_NAME TEXT ;
BEGIN
SELECT LAST_NAME INTO MY_NAME FROM STUDENT.DEMO WHERE ID = 2;
RETURN MY_NAME;
END;
$$ LANGUAGE PLPGSQL;
-- FUNCTION TEXT
CREATE OR REPLACE FUNCTION STUDENT.PRINT_DATA()
RETURNS TEXT AS $$
DECLARE 
MY_NAME TEXT ;
BEGIN
SELECT LAST_NAME INTO MY_NAME FROM STUDENT.DEMO WHERE ID = 2;
RETURN MY_NAME;
END;
$$ LANGUAGE PLPGSQL;

SELECT STUDENT.PRINT_DATA()
--TRIGER FUNCTION
-- Step 1: Create the tables
CREATE TABLE STUDENT.STUDENT_INFO (
    ID SERIAL PRIMARY KEY,
    FIRST_NAME VARCHAR(20)
);

DROP TABLE STUDENT.STUDENT_COUNT

CREATE TABLE STUDENT.STUDENT_COUNT (
    ID SERIAL PRIMARY KEY,
    COUNT INT DEFAULT 0
);

-- Step 2: Initialize the student_count table
INSERT INTO STUDENT.STUDENT_COUNT (ID, COUNT)
VALUES (1, 2);

-- Step 3: Create the trigger function
CREATE OR REPLACE FUNCTION STUDENT.IN_COUNT()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE STUDENT.STUDENT_COUNT
    SET COUNT = COUNT + 1;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

-- Step 4: Create the trigger
CREATE TRIGGER AFTER_INCREMENT_COUNT
AFTER INSERT ON STUDENT.STUDENT_INFO
FOR EACH ROW
EXECUTE FUNCTION STUDENT.IN_COUNT();
SELECT * FROM STUDENT.STUDENT_COUNT
INSERT INTO STUDENT.STUDENT_INFO VALUES(2,'SATYA')
-- MORE FUNCTION
CREATE OR REPLACE FUNCTION STUDENT.SUM(A INT , B INT)
RETURNS INT AS $$
BEGIN
RETURN A+B;
END;
$$ LANGUAGE PLPGSQL;
SELECT STUDENT.SUM(2,4) AS RESULT 

CREATE OR REPLACE FUNCTION STUDENT.DIV(A INT, B INT)
RETURNS TEXT AS $$
DECLARE DATA_INFO TEXT;
BEGIN 
SELECT (A/B) INTO DATA_INFO;
RETURN DATA_INFO;
END;
$$ LANGUAGE PLPGSQL;
SELECT STUDENT.DIV(12,3)

-- MORE TRIGGER FUNCTION
CREATE TABLE STUDENT.STUDENT_INFO(ID SERIAL PRIMARY KEY, NAME VARCHAR(20));
CREATE TABLE STUDENT.STUDENT_COUNT(ID SERIAL PRIMARY KEY, COUNT INT DEFAULT 0);
INSERT INTO STUDENT.STUDENT_COUNT VALUES(1,1)
--COUNT FUNCTION 
CREATE OR REPLACE FUNCTION STUDENT.COUNT()
RETURNS TRIGGER AS $$
BEGIN 
UPDATE STUDENT.STUDENT_COUNT SET COUNT = COUNT+1;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER INCREASE_DATA AFTER INSERT ON STUDENT.STUDENT_INFO FOR EACH ROW EXECUTE FUNCTION STUDENT.COUNT()
INSERT INTO STUDENT.STUDENT_INFO VALUES(1,'SATYA')
INSERT INTO STUDENT.STUDENT_INFO VALUES(3,'PRAKASH')
SELECT * FROM STUDENT.STUDENT_COUNT
-- MORE EXAMPLE
CREATE TABLE STUDENT.STUDENT_INFO(ID SERIAL PRIMARY KEY, NAME VARCHAR(20));
CREATE TABLE STUDENT.STUDENT_COUNT(ID SERIAL PRIMARY KEY, COUNT INT DEFAULT 0);
INSERT INTO STUDENT.STUDENT_COUNT VALUES(1,1)
--COUNT FUNCTION 
CREATE OR REPLACE FUNCTION STUDENT.COUNT()
RETURNS TRIGGER AS $$
BEGIN 
UPDATE STUDENT.STUDENT_COUNT SET COUNT = COUNT+1;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER INCREASE_DATA AFTER INSERT ON STUDENT.STUDENT_INFO FOR EACH ROW EXECUTE FUNCTION STUDENT.COUNT()
INSERT INTO STUDENT.STUDENT_INFO VALUES(1,'SATYA')
INSERT INTO STUDENT.STUDENT_INFO VALUES(3,'PRAKASH')
SELECT * FROM STUDENT.STUDENT_COUNT 

CREATE TABLE STUDENT.TB1(TB1_ID SERIAL PRIMARY KEY, TB1_NAME VARCHAR(100) NOT NULL);
CREATE TABLE STUDENT.TB2 (
    TB2_ID SERIAL PRIMARY KEY,
    TB2_NAME VARCHAR(200) NOT NULL,
    TB1ID INT,
    FOREIGN KEY (TB1ID) REFERENCES STUDENT.TB1(TB1_ID)
);

INSERT INTO STUDENT.TB1 VALUES(1,'TB2'), (2,'TB11'),(3,'TB112')
INSERT INTO STUDENT.TB2 VALUES(1,'TB2')
SELECT * FROM STUDENT.TB2
INSERT INTO STUDENT.TB2 (TB2_NAME, TB1ID) VALUES ('Student ', 2), ('Student ', 2);
